#pragma once

#include <math.h>
#include <memory>

namespace fmgen {

class Tables {
 public:
  static void MakeTable();
  static void MakeLFOTable();

  static inline const int* SSGEnv(int a, int b, int c);
  static inline int8_t Detune(int index);
  static inline uint8_t Note(int index);
  static inline int8_t Attack(int rate, int count);
  static inline int8_t Decay1(int rate, int count);
  static inline int Decay2(int rate);

  // 入力: s = 20+FM_PGBITS = 29
  // Sine(s) sinetable[((s) >> (20+FM_PGBITS-FM_OPSINBITS))&(FM_OPSINENTS-1)]
  // SINE(s) sinetable[(s) & (FM_OPSINENTS-1)]
  static inline uint16_t SINE(int s) {
    return sinetable[s & (FM_OPSINENTS - 1)];
  }
  static inline int16_t CL(int s) { return cltable[s]; }

  static constexpr int GetSineShift() { return 20 + FM_PGBITS - FM_OPSINBITS; }

 private:
  static const int FM_OPSINBITS = 10;
  static const int FM_OPSINENTS = 1 << FM_OPSINBITS;

  static std::unique_ptr<int16_t[]> cltable;
  static std::unique_ptr<uint16_t[]> sinetable;
};

// static
inline const int* Tables::SSGEnv(int a, int b, int c) {
  // clang-format off
    static const int ssgenvtable[8][2][3][2] = {
        { { { 1, 1, }, { 1, 1, }, { 1, 1, } },       // 08
          { { 0, 1, }, { 1, 1, }, { 1, 1, } } },     // 08 56~
        { { { 0, 1, }, { 2, 0, }, { 2, 0, } },       // 09
          { { 0, 1, }, { 2, 0, }, { 2, 0, } } },     // 09
        { { { 1, -1, }, { 0, 1, }, { 1, -1, } },     // 10
          { { 0, 1, }, { 1, -1, }, { 0, 1, } } },    // 10 60~
        { { { 1, -1, }, { 0, 0, }, { 0, 0, } },      // 11
          { { 0, 1, }, { 0, 0, }, { 0, 0, } } },     // 11 60~
        { { { 2, -1, }, { 2, -1, }, { 2, -1, } },    // 12
          { { 1, -1, }, { 2, -1, }, { 2, -1, } } },  // 12 56~
        { { { 1, -1, }, { 0, 0, }, { 0, 0, } },      // 13
          { { 1, -1, }, { 0, 0, }, { 0, 0, } } },    // 13
        { { { 0, 1, }, { 1, -1, }, { 0, 1, } },      // 14
          { { 1, -1, }, { 0, 1, }, { 1, -1, } } },   // 14 60~
        { { { 0, 1, }, { 2, 0, }, { 2, 0, } },       // 15
          { { 1, -1, }, { 2, 0, }, { 2, 0, } } }     // 15 60~
    };
  // clang-format on
  return ssgenvtable[a][b][c];
}

// static
inline int8_t Tables::Detune(int index) {
  // clang-format off
    static const int8_t dttable[256] = {
          0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
          0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
          0,  0,  0,  0,  2,  2,  2,  2,  2,  2,  2,  2,  4,  4,  4,  4,
          4,  6,  6,  6,  8,  8,  8, 10, 10, 12, 12, 14, 16, 16, 16, 16,
          2,  2,  2,  2,  4,  4,  4,  4,  4,  6,  6,  6,  8,  8,  8, 10,
         10, 12, 12, 14, 16, 16, 18, 20, 22, 24, 26, 28, 32, 32, 32, 32,
          4,  4,  4,  4,  4,  6,  6,  6,  8,  8,  8, 10, 10, 12, 12, 14,
         16, 16, 18, 20, 22, 24, 26, 28, 32, 34, 38, 40, 44, 44, 44, 44,
          0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
          0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
          0,  0,  0,  0, -2, -2, -2, -2, -2, -2, -2, -2, -4, -4, -4, -4,
         -4, -6, -6, -6, -8, -8, -8,-10,-10,-12,-12,-14,-16,-16,-16,-16,
         -2, -2, -2, -2, -4, -4, -4, -4, -4, -6, -6, -6, -8, -8, -8,-10,
        -10,-12,-12,-14,-16,-16,-18,-20,-22,-24,-26,-28,-32,-32,-32,-32,
         -4, -4, -4, -4, -4, -6, -6, -6, -8, -8, -8,-10,-10,-12,-12,-14,
        -16,-16,-18,-20,-22,-24,-26,-28,-32,-34,-38,-40,-44,-44,-44,-44,
    };
  // clang-format on
  return dttable[index];
}

// static
inline uint8_t Tables::Note(int index) {
  // clang-format off
    static const uint8_t notetable[128] = {
         0,  0,  0,  0,  0,  0,  0,  1,  2,  3,  3,  3,  3,  3,  3,  3,
         4,  4,  4,  4,  4,  4,  4,  5,  6,  7,  7,  7,  7,  7,  7,  7,
         8,  8,  8,  8,  8,  8,  8,  9, 10, 11, 11, 11, 11, 11, 11, 11,
        12, 12, 12, 12, 12, 12, 12, 13, 14, 15, 15, 15, 15, 15, 15, 15,
        16, 16, 16, 16, 16, 16, 16, 17, 18, 19, 19, 19, 19, 19, 19, 19,
        20, 20, 20, 20, 20, 20, 20, 21, 22, 23, 23, 23, 23, 23, 23, 23,
        24, 24, 24, 24, 24, 24, 24, 25, 26, 27, 27, 27, 27, 27, 27, 27,
        28, 28, 28, 28, 28, 28, 28, 29, 30, 31, 31, 31, 31, 31, 31, 31,
    };
  // clang-format on
  return notetable[index];
}

// static
inline int8_t Tables::Attack(int rate, int count) {
  // clang-format off
    static const int8_t attacktable[64][8] = {
        // 0-
        { -1, -1, -1, -1, -1, -1, -1, -1, },
        { -1, -1, -1, -1, -1, -1, -1, -1, },
        { 4, 4, 4, 4, 4, 4, 4, 4, },
        { 4, 4, 4, 4, 4, 4, 4, 4, },
        // 4-
        { 4, 4, 4, 4, 4, 4, 4, 4, },
        { 4, 4, 4, 4, 4, 4, 4, 4, },
        { 4, 4, 4, -1, 4, 4, 4, -1, },
        { 4, 4, 4, -1, 4, 4, 4, -1, },
        // 8-
        { 4, -1, 4, -1, 4, -1, 4, -1, },
        { 4, 4, 4, -1, 4, -1, 4, -1, },
        { 4, 4, 4, -1, 4, 4, 4, -1, },
        { 4, 4, 4, 4, 4, 4, 4, -1, },
        // 12-
        { 4, -1, 4, -1, 4, -1, 4, -1, },
        { 4, 4, 4, -1, 4, -1, 4, -1, },
        { 4, 4, 4, -1, 4, 4, 4, -1, },
        { 4, 4, 4, 4, 4, 4, 4, -1, },
        // 16-
        { 4, -1, 4, -1, 4, -1, 4, -1, },
        { 4, 4, 4, -1, 4, -1, 4, -1, },
        { 4, 4, 4, -1, 4, 4, 4, -1, },
        { 4, 4, 4, 4, 4, 4, 4, -1, },
        // 20-
        { 4, -1, 4, -1, 4, -1, 4, -1, },
        { 4, 4, 4, -1, 4, -1, 4, -1, },
        { 4, 4, 4, -1, 4, 4, 4, -1, },
        { 4, 4, 4, 4, 4, 4, 4, -1, },
        // 24-
        { 4, -1, 4, -1, 4, -1, 4, -1, },
        { 4, 4, 4, -1, 4, -1, 4, -1, },
        { 4, 4, 4, -1, 4, 4, 4, -1, },
        { 4, 4, 4, 4, 4, 4, 4, -1, },
        // 28-
        { 4, -1, 4, -1, 4, -1, 4, -1, },
        { 4, 4, 4, -1, 4, -1, 4, -1, },
        { 4, 4, 4, -1, 4, 4, 4, -1, },
        { 4, 4, 4, 4, 4, 4, 4, -1, },
        // 32-
        { 4, -1, 4, -1, 4, -1, 4, -1, },
        { 4, 4, 4, -1, 4, -1, 4, -1, },
        { 4, 4, 4, -1, 4, 4, 4, -1, },
        { 4, 4, 4, 4, 4, 4, 4, -1, },
        // 36-
        { 4, -1, 4, -1, 4, -1, 4, -1, },
        { 4, 4, 4, -1, 4, -1, 4, -1, },
        { 4, 4, 4, -1, 4, 4, 4, -1, },
        { 4, 4, 4, 4, 4, 4, 4, -1, },
        // 40-
        { 4, -1, 4, -1, 4, -1, 4, -1, },
        { 4, 4, 4, -1, 4, -1, 4, -1, },
        { 4, 4, 4, -1, 4, 4, 4, -1, },
        { 4, 4, 4, 4, 4, 4, 4, -1, },
        // 44-
        { 4, -1, 4, -1, 4, -1, 4, -1, },
        { 4, 4, 4, -1, 4, -1, 4, -1, },
        { 4, 4, 4, -1, 4, 4, 4, -1, },
        { 4, 4, 4, 4, 4, 4, 4, -1, },
        // 48-
        { 4, 4, 4, 4, 4, 4, 4, 4, },
        { 3, 4, 4, 4, 3, 4, 4, 4, },
        { 3, 4, 3, 4, 3, 4, 3, 4, },
        { 3, 3, 3, 4, 3, 3, 3, 4, },
        // 52-
        { 3, 3, 3, 3, 3, 3, 3, 3, },
        { 2, 3, 3, 3, 2, 3, 3, 3, },
        { 2, 3, 2, 3, 2, 3, 2, 3, },
        { 2, 2, 2, 3, 2, 2, 2, 3, },
        // 56-
        { 2, 2, 2, 2, 2, 2, 2, 2, },
        { 1, 2, 2, 2, 1, 2, 2, 2, },
        { 1, 2, 1, 2, 1, 2, 1, 2, },
        { 1, 1, 1, 2, 1, 1, 1, 2, },
        // 60-
        { 0, 0, 0, 0, 0, 0, 0, 0, },
        { 0, 0, 0, 0, 0, 0, 0, 0, },
        { 0, 0, 0, 0, 0, 0, 0, 0, },
        { 0, 0, 0, 0, 0, 0, 0, 0, },
    };
  // clang-format on
  return attacktable[rate][count];
}

// static
inline int8_t Tables::Decay1(int rate, int count) {
  // clang-format off
    static const int8_t decaytable1[64][8] = {
        // 0-3
        { 0, 0, 0, 0, 0, 0, 0, 0, },
        { 0, 0, 0, 0, 0, 0, 0, 0, },
        { 1, 1, 1, 1, 1, 1, 1, 1, },
        { 1, 1, 1, 1, 1, 1, 1, 1, },
        // 4-7
        { 1, 1, 1, 1, 1, 1, 1, 1, },
        { 1, 1, 1, 1, 1, 1, 1, 1, },
        { 1, 1, 1, 0, 1, 1, 1, 0, },
        { 1, 1, 1, 0, 1, 1, 1, 0, },
        // 8-11
        { 1, 0, 1, 0, 1, 0, 1, 0, },
        { 1, 1, 1, 0, 1, 0, 1, 0, },
        { 1, 1, 1, 0, 1, 1, 1, 0, },
        { 1, 1, 1, 1, 1, 1, 1, 0, },
        // 12-15
        { 1, 0, 1, 0, 1, 0, 1, 0, },
        { 1, 1, 1, 0, 1, 0, 1, 0, },
        { 1, 1, 1, 0, 1, 1, 1, 0, },
        { 1, 1, 1, 1, 1, 1, 1, 0, },
        // 16-19
        { 1, 0, 1, 0, 1, 0, 1, 0, },
        { 1, 1, 1, 0, 1, 0, 1, 0, },
        { 1, 1, 1, 0, 1, 1, 1, 0, },
        { 1, 1, 1, 1, 1, 1, 1, 0, },
        // 20-23
        { 1, 0, 1, 0, 1, 0, 1, 0, },
        { 1, 1, 1, 0, 1, 0, 1, 0, },
        { 1, 1, 1, 0, 1, 1, 1, 0, },
        { 1, 1, 1, 1, 1, 1, 1, 0, },
        // 24-27
        { 1, 0, 1, 0, 1, 0, 1, 0, },
        { 1, 1, 1, 0, 1, 0, 1, 0, },
        { 1, 1, 1, 0, 1, 1, 1, 0, },
        { 1, 1, 1, 1, 1, 1, 1, 0, },
        // 28-31
        { 1, 0, 1, 0, 1, 0, 1, 0, },
        { 1, 1, 1, 0, 1, 0, 1, 0, },
        { 1, 1, 1, 0, 1, 1, 1, 0, },
        { 1, 1, 1, 1, 1, 1, 1, 0, },
        // 32-35
        { 1, 0, 1, 0, 1, 0, 1, 0, },
        { 1, 1, 1, 0, 1, 0, 1, 0, },
        { 1, 1, 1, 0, 1, 1, 1, 0, },
        { 1, 1, 1, 1, 1, 1, 1, 0, },
        // 36-39
        { 1, 0, 1, 0, 1, 0, 1, 0, },
        { 1, 1, 1, 0, 1, 0, 1, 0, },
        { 1, 1, 1, 0, 1, 1, 1, 0, },
        { 1, 1, 1, 1, 1, 1, 1, 0, },
        // 40-43
        { 1, 0, 1, 0, 1, 0, 1, 0, },
        { 1, 1, 1, 0, 1, 0, 1, 0, },
        { 1, 1, 1, 0, 1, 1, 1, 0, },
        { 1, 1, 1, 1, 1, 1, 1, 0, },
        // 44-47
        { 1, 0, 1, 0, 1, 0, 1, 0, },
        { 1, 1, 1, 0, 1, 0, 1, 0, },
        { 1, 1, 1, 0, 1, 1, 1, 0, },
        { 1, 1, 1, 1, 1, 1, 1, 0, },
        // 48-51
        { 1, 1, 1, 1, 1, 1, 1, 1, },
        { 2, 1, 1, 1, 2, 1, 1, 1, },
        { 2, 1, 2, 1, 2, 1, 2, 1, },
        { 2, 2, 2, 1, 2, 2, 2, 1, },
        // 52-55
        { 2, 2, 2, 2, 2, 2, 2, 2, },
        { 4, 2, 2, 2, 4, 2, 2, 2, },
        { 4, 2, 4, 2, 4, 2, 4, 2, },
        { 4, 4, 4, 2, 4, 4, 4, 2, },
        // 56-59
        { 4, 4, 4, 4, 4, 4, 4, 4, },
        { 8, 4, 4, 4, 8, 4, 4, 4, },
        { 8, 4, 8, 4, 8, 4, 8, 4, },
        { 8, 8, 8, 4, 8, 8, 8, 4, },
        // 60-63
        { 16, 16, 16, 16, 16, 16, 16, 16, },
        { 16, 16, 16, 16, 16, 16, 16, 16, },
        { 16, 16, 16, 16, 16, 16, 16, 16, },
        { 16, 16, 16, 16, 16, 16, 16, 16, }
    };
  // clang-format on
  return decaytable1[rate][count];
}

// static
inline int Tables::Decay2(int rate) {
  // clang-format off
    static const int decaytable2[16] = {
        1, 2, 4, 8,
        16, 32, 64, 128,
        256, 512, 1024, 2047,
        2047, 2047, 2047, 2047
    };
  // clang-format on
  return decaytable2[rate];
}

// fixed equasion-based tables
extern int pmtable[2][8][FM_LFOENTS];
extern uint32_t amtable[2][4][FM_LFOENTS];

}  // namespace fmgen
